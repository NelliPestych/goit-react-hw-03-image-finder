{"version":3,"sources":["Galery.module.css","serviceWorker.js","Spinner.js","SearchForm.js","articlesApi.js","Modal.js","ImageFinder.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Spinner","message","SearchForm","state","inputValue","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","onSubmit","this","type","onChange","Component","searchQuery","page","axios","get","then","response","data","hits","Modal","handleKeyDown","code","onClose","addEventListener","removeEventListener","className","styles","Overlay","children","ImageFinder","articles","loading","error","largeImageURL","showModal","fetchArticles","articlesApi","prevState","catch","finally","handleSearchFormSubmit","query","toggleModal","event","console","log","alt","prevProps","length","position","map","id","webformatURL","pictures","key","onClick","tofit","src","width","height","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0da96ac2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"pictures\":\"Galery_pictures__3SM3Q\",\"position\":\"Galery_position__17Ppf\",\"tofit\":\"Galery_tofit__3F-46\",\"Overlay\":\"Galery_Overlay__2nlKz\",\"Modal\":\"Galery_Modal__2qVui\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nexport default function Spinner({ message }) {\r\nreturn <p>Whoops, something went erong: {message}</p>;\r\n}","import React, { Component } from \"react\";\r\n\r\nexport default class SearchForm extends Component {\r\n    state = { inputValue: '' };\r\n  handleChange = (e) => {\r\n    this.setState({ inputValue: e.target.value });\r\n  };\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.onSubmit(this.state.inputValue);\r\n  };\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <label>\r\n          enter search query\r\n          <input\r\n            type=\"text\"\r\n            value={this.state.inputValue}\r\n            onChange={this.handleChange}\r\n          />\r\n        </label>\r\n        <button type=\"submit\">Search</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n","import axios from 'axios';\r\n\r\nconst fetchArticlesWithQuery = (searchQuery, page = 0) => {\r\n  return axios\r\n    .get(\r\n      `https://pixabay.com/api/?key=16588925-02413834d9828552035921ade&q=${searchQuery}&image_type=photo&page=${page + 1}&per_page=12`\r\n    )\r\n    .then((response) => response.data.hits);\r\n};\r\n\r\nexport default {\r\n  fetchArticlesWithQuery,\r\n};\r\n","import React, { Component } from \"react\";\r\nimport styles from \"./Galery.module.css\";\r\n\r\nexport default class Modal extends Component {\r\n  componentDidMount() {\r\n    window.addEventListener(\"keydown\", this.handleKeyDown);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"keydown\", this.handleKeyDown);\r\n  }\r\n\r\n  handleKeyDown = (e) => {\r\n    if (e.code === \"Escape\") {\r\n      this.props.onClose();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className={styles.Overlay}>\r\n        <div className={styles.Modal}>{this.props.children}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Spinner from \"./Spinner\";\r\n// import Notification from \"./Notification\";\r\n// import ArticleList from \"./ArticleList\";\r\nimport SearchForm from \"./SearchForm\";\r\nimport articlesApi from \"./articlesApi\";\r\nimport Modal from \"./Modal\";\r\nimport styles from \"./Galery.module.css\";\r\n\r\nexport default class ImageFinder extends Component {\r\n  state = {\r\n    articles: [],\r\n    loading: false,\r\n    error: null,\r\n    searchQuery: \"\",\r\n    page: 0,\r\n    largeImageURL: null,\r\n    showModal: false,\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const prevQuery = prevState.searchQuery;\r\n    const nextQuery = this.state.searchQuery;\r\n\r\n    if (prevQuery !== nextQuery) {\r\n      this.fetchArticles();\r\n    }\r\n  }\r\n\r\n  fetchArticles = () => {\r\n    const { searchQuery, page } = this.state;\r\n\r\n    this.setState({ loading: true });\r\n\r\n    articlesApi\r\n      .fetchArticlesWithQuery(searchQuery, page)\r\n      .then((articles) =>\r\n        this.setState((prevState) => ({\r\n          articles: [...prevState.articles, ...articles],\r\n          page: prevState.page + 1,\r\n        }))\r\n      )\r\n      .catch((error) => this.setState({ error }))\r\n      .finally(() => this.setState({ loading: false }));\r\n  };\r\n\r\n  handleSearchFormSubmit = (query) => {\r\n    this.setState({\r\n      searchQuery: query,\r\n      page: 0,\r\n      articles: [],\r\n    });\r\n  };\r\n\r\n  toggleModal = (event) => {\r\n    const { target } = event;\r\n    console.log(target.alt);\r\n    this.setState((state) => ({\r\n      showModal: !state.showModal,\r\n      largeImageURL: target.alt,\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    const { articles, loading, showModal } = this.state;\r\n    return (\r\n      <>\r\n        <SearchForm onSubmit={this.handleSearchFormSubmit} />\r\n        {/* {error && (\r\n          <Notification\r\n            message={`Woops, something went wrong: ${error.message}`}\r\n          />\r\n        )} */}\r\n\r\n        {articles.length > 0 && (\r\n          <ul className={styles.position}>\r\n            {articles.map(({ id, webformatURL, largeImageURL }) => (\r\n              <li className={styles.pictures} key={id}>\r\n                <img\r\n                  onClick={this.toggleModal}\r\n                  className={styles.tofit}\r\n                  src={webformatURL}\r\n                  alt={largeImageURL}\r\n                  width=\"150\"\r\n                  height=\"84\"\r\n                />\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        )}\r\n        {showModal && (\r\n          <Modal onClose={this.toggleModal}>\r\n            <div>\r\n              <img\r\n                src={this.state.largeImageURL}\r\n                alt=\"\"\r\n                width=\"350\"\r\n                height=\"auto\"\r\n              />\r\n            </div>\r\n            <button type=\"button\" onClick={this.toggleModal}>\r\n              Close modal\r\n            </button>\r\n          </Modal>\r\n        )}\r\n        {loading && <Spinner message=\"Loading...\" />}\r\n\r\n        {articles.length > 0 && !loading && (\r\n          <button type=\"button\" onClick={this.fetchArticles}>\r\n            Load more\r\n          </button>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport ImageFinder from './ImageFinder';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ImageFinder />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}